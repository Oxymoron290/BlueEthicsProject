datasource db {
  provider = "postgresql" // or your chosen database provider
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model RequestMethod {
  id          Int           @id @default(autoincrement())
  type        RequestMethodType
  location    String
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  records     Record[]
}

model Organization {
  id             Int              @id @default(autoincrement())
  name           String
  website        String
  phone          String
  address        Address       @relation(fields: [addressId], references: [id])
  addressId      Int
  validRequestMethods       RequestMethod[]
  records        Record[]
  personnel      Subject[]

  @@unique([addressId])
}

model Address {
  id          Int      @id @default(autoincrement())
  address1    String
  address2    String?
  city        String
  state       String
  county      String
  postalCode  String
  country     String
  latitude    Float
  longitude   Float
  company     String?
  request     OriginalRequest?
  originalRequestId Int?
  organization Organization?
  organizationId Int?
}

model Record {
  id             Int            @id @default(autoincrement())
  originationDate DateTime?
  organization   Organization   @relation(fields: [organizationId], references: [id])
  organizationId Int
  requestMethod  RequestMethod  @relation(fields: [requestMethodId], references: [id])
  requestMethodId Int
  originalRequest OriginalRequest  @relation(fields: [originalRequestId], references: [id])
  originalRequestId Int
  personelRecords PersonnelRecord[]
  status         RecordStatus
  responses      Response[]
}

model OriginalRequest {
  id               Int      @id @default(autoincrement())
  firstName        String
  lastName         String
  company     String
  mailingAddress   Address   @relation(fields: [mailingAddressId], references: [id])
  mailingAddressId Int
  emailAddress     String
  phone            String
  preferredCommunication CommunicationType
  policeRecords    Boolean
  description      String
  records          Record[]
  attachments      String[]
  startDate        DateTime
  endDate          DateTime
  results          RecordResultType
  
  @@unique([mailingAddressId])
}

model Response {
  id        Int      @id @default(autoincrement())
  method    String
  from      String
  to        String
  message   String
  attachments String[]
  record    Record   @relation(fields: [recordId], references: [id])
  recordId  Int
}

model PersonnelRecord {
  id          Int           @id @default(autoincrement())
  subject     Subject       @relation(fields: [subjectId], references: [id])
  subjectId   Int
  foiaRequest Record        @relation(fields: [foiaRequestId], references: [id])
  foiaRequestId Int
  complaints  Complaint[]
  commendations Commendation[]
}

model Complaint {
  id           Int      @id @default(autoincrement())
  attachments  String[]
  description  String
  status       FeedbackStatus
  personnel    PersonnelRecord @relation(fields: [personnelRecordId], references: [id])
  personnelRecordId Int
}

model Commendation {
  id           Int      @id @default(autoincrement())
  attachments  String[]
  description  String
  status       FeedbackStatus
  personnel    PersonnelRecord @relation(fields: [personnelRecordId], references: [id])
  personnelRecordId Int
}

model CaseFile {
  id           Int           @id @default(autoincrement())
  caseNumber   String
  type         String
  district     String
  status       String
  assignments  Assignment[]
  incidents    Incident[]
  narratives   Narrative[]
}

model Assignment {
  id             Int       @id @default(autoincrement())
  lead           Boolean
  name           String
  badge          String
  assignedOn     DateTime
  dismissedOn    DateTime?
  dismissalReason String?
  caseFile       CaseFile  @relation(fields: [caseFileId], references: [id])
  caseFileId     Int
}

model Incident {
  id             Int       @id @default(autoincrement())
  incidentNumber String
  dateReported   DateTime
  dateOccured    DateTime
  offence        String
  caseFile       CaseFile  @relation(fields: [caseFileId], references: [id])
  caseFileId     Int
}

model Narrative {
  id          Int       @id @default(autoincrement())
  author      String
  narrative   String
  caseFile    CaseFile  @relation(fields: [caseFileId], references: [id])
  caseFileId  Int
}

model Subject {
  id                Int      @id @default(autoincrement())
  employeeId        Int?
  titleName         String?
  firstName         String
  lastName          String
  middleName        String?
  nickName          String?
  department        String
  position          String
  positionTitle     String
  ethnicity         String
  gender            String
  accrualProfile    String?
  employeeStatus    String?
  dateHired         DateTime
  separationDate    DateTime?
  salary            Float
  certifiedOfficer  Boolean
  currentlyEmployed Boolean
  complaints        Int
  sustainedComplaints Int
  pendingComplaints Int
  commendations     Int
  personelRecords   PersonnelRecord[]
  organization      Organization @relation(fields: [organizationId], references: [id])
  organizationId    Int
}

enum RequestMethodType {
  WEB
  EMAIL
  MAIL
  SELF
}

enum FeedbackStatus {
  SUSTAINED
  PENDING
  NOT_SUSTAINED
}

enum CommunicationType {
  PHONE
  TEXT
  EMAIL
  MAIL
}

enum RecordResultType {
  COPY
  INSPECTION
}

enum RecordStatus {
  NEW
  PENDING
  AG_RULING
  IN_REVIEW
  CLOSED
}